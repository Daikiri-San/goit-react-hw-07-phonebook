{"version":3,"sources":["contexts/ThemeContext.js","redux/contacts/contactsActions.js","redux/contacts/contactsOperations.js","redux/contacts/contactsSelectors.js","components/hoc/withTheme.js","components/Filter.js","components/Layout.js","components/Notification.js","components/ContactForm.js","components/TextNotification.js","components/ContactList/ListItem.js","components/ContactList/ContactList.js","components/Header.js","components/Spinner.js","components/App.js","redux/contacts/contactsReducer.js","redux/store.js","index.js","components/transitions/slideNotice.module.css","components/transitions/slideItem.module.css","components/transitions/slideTitle.module.css"],"names":["themeConfig","light","mainBGColor","contentColor","mainShadowBox","inputColor","messageColor","dark","Context","createContext","ThemeContext","toggleTheme","state","theme","config","setState","children","this","props","Provider","value","Component","Consumer","fetchExistContactsRequest","createAction","fetchExistContactsSuccess","fetchExistContactsError","addContactRequest","addContactSuccess","addContactError","removeContactRequest","removeContactSuccess","removeContactError","changeFilter","axios","defaults","baseURL","addContact","name","number","dispatch","contactsActions","post","then","data","catch","error","fetchExistContacts","get","removeContact","id","delete","console","log","getContacts","contacts","items","getFilter","filter","getLoading","loading","getError","getVisibleContacts","createSelector","toLowerCase","includes","getTaskById","contactId","find","WithTheme","WrappedComponent","ctx","Container","styled","div","shadow","Label","label","Input","input","backGroundColor","mapDispatchToProps","onChangeFilter","connect","withThemeContext","type","onChange","target","Background","color","Text","p","Notification","message","apearNotice","CSSTransition","timeout","classNames","slideNoticeTransition","in","unmountOnExit","Form","form","css","isValid","Button","button","ErrorText","ContactForm","notice","onAddContact","contact","setTimeout","test","hasError","initialValues","validate","values","errors","onSubmit","setSubmitting","resetForm","touched","handleChange","handleBlur","handleSubmit","isSubmitting","onBlur","disabled","ContactsOperations","contactsSelectors","Item","li","Name","Number","ownProps","onRemoveContact","contactsOperations","onClick","List","ul","visibleContacts","TransitionGroup","component","map","key","slideItemTransition","length","HeaderContenet","header","Title","h1","LabelOfSwitch","span","Slider","text","slideTitleTransition","appear","checked","SpinnerContainer","Spinner","height","width","App","onFetchExistContacts","isLoadingContacts","createReducer","payload","_","contactsReducer","combineReducers","store","configureStore","reducer","ReactDOM","render","document","querySelector","module","exports"],"mappings":"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","file":"static/js/main.4d08fb9c.chunk.js","sourcesContent":["import React, { Component, createContext } from 'react';\r\n\r\nconst themeConfig = {\r\n  light: {\r\n    mainBGColor: 'snow',\r\n    contentColor: '#1d2bcc',\r\n    mainShadowBox: '0px 2px 8px -3px rgba(0, 0, 0, 0.75)',\r\n    inputColor: 'snow',\r\n    messageColor: 'black',\r\n  },\r\n\r\n  dark: {\r\n    mainBGColor: '#333333',\r\n    contentColor: '#ccc',\r\n    mainShadowBox: '0px 0px 8px 1px rgba(255, 255, 255, 0.75)',\r\n    inputColor: '#e0e0e0',\r\n    messageColor: '#ccc',\r\n  },\r\n};\r\n\r\nconst Context = createContext(themeConfig.light);\r\n\r\nclass ThemeContext extends Component {\r\n  static Consumer = Context.Consumer;\r\n\r\n  toggleTheme = () => {\r\n    const { theme, config } = this.state;\r\n    this.setState({\r\n      theme: theme === 'dark' ? 'light' : 'dark',\r\n      config:\r\n        config === themeConfig.light ? themeConfig.dark : themeConfig.light,\r\n    });\r\n  };\r\n\r\n  state = {\r\n    theme: 'light',\r\n    toggleTheme: this.toggleTheme,\r\n    config: themeConfig.light,\r\n  };\r\n\r\n  render() {\r\n    const { children } = this.props;\r\n    return (\r\n      <Context.Provider\r\n        value={{\r\n          ...this.state,\r\n        }}\r\n      >\r\n        {children}\r\n      </Context.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ThemeContext;\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst fetchExistContactsRequest = createAction('contacts/fetchExistRequest');\r\nconst fetchExistContactsSuccess = createAction('contacts/fetchExistSuccess');\r\nconst fetchExistContactsError = createAction('contacts/fetchExistError');\r\n\r\nconst addContactRequest = createAction('contacts/addRequest');\r\nconst addContactSuccess = createAction('contacts/addSuccess');\r\nconst addContactError = createAction('contacts/addError');\r\n\r\nconst removeContactRequest = createAction('contacts/removeRequest');\r\nconst removeContactSuccess = createAction('contacts/removeSuccess');\r\nconst removeContactError = createAction('contacts/removeError');\r\n\r\nconst changeFilter = createAction('filter/change');\r\n\r\nexport default {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  fetchExistContactsRequest,\r\n  fetchExistContactsSuccess,\r\n  fetchExistContactsError,\r\n  removeContactRequest,\r\n  removeContactSuccess,\r\n  removeContactError,\r\n  changeFilter,\r\n};\r\n","import axios from 'axios';\r\nimport contactsActions from './contactsActions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:2000';\r\n\r\nconst fetchExistContacts = () => dispatch => {\r\n  dispatch(contactsActions.fetchExistContactsRequest());\r\n\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => {\r\n      dispatch(contactsActions.fetchExistContactsSuccess(data));\r\n    })\r\n    .catch(error => dispatch(contactsActions.fetchExistContactsError(error)));\r\n};\r\n\r\nconst addContact = ({ name, number }) => dispatch => {\r\n  dispatch(contactsActions.addContactRequest());\r\n\r\n  axios\r\n    .post('/contacts', { name, number })\r\n    .then(({ data }) => {\r\n      dispatch(contactsActions.addContactSuccess(data));\r\n    })\r\n    .catch(error => dispatch(contactsActions.addContactError(error)));\r\n};\r\n\r\nconst removeContact = id => dispatch => {\r\n  dispatch(contactsActions.removeContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => {\r\n      dispatch(contactsActions.removeContactSuccess(id));\r\n    })\r\n    .catch(error => {\r\n      console.log(error);\r\n      dispatch(contactsActions.removeContactError('error'));\r\n    });\r\n};\r\n\r\nexport default {\r\n  addContact,\r\n  fetchExistContacts,\r\n  removeContact,\r\n};\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getLoading = ({ contacts }) => contacts.loading;\r\nconst getContacts = ({ contacts }) => contacts.items;\r\nconst getFilter = ({ contacts }) => contacts.filter;\r\nconst getError = ({ contacts }) => contacts.error;\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    return contacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n  },\r\n);\r\n\r\nconst getTaskById = createSelector(\r\n  [(state, contactId) => contactId, getContacts],\r\n  (contactId, contacts) => contacts.find(({ id }) => id === contactId),\r\n);\r\n\r\nexport default {\r\n  getLoading,\r\n  getContacts,\r\n  getFilter,\r\n  getError,\r\n  getVisibleContacts,\r\n  getTaskById,\r\n};\r\n","import React from 'react';\r\nimport ThemeContext from '../../contexts/ThemeContext';\r\n\r\nconst WithTheme = WrappedComponent => {\r\n  return function WithThemeContext(props) {\r\n    return (\r\n      <ThemeContext.Consumer>\r\n        {ctx => <WrappedComponent {...props} theme={ctx} />}\r\n      </ThemeContext.Consumer>\r\n    );\r\n  };\r\n};\r\n\r\nexport default WithTheme;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../redux/contacts/contactsActions';\r\nimport withThemeContext from './hoc/withTheme';\r\n\r\nconst Container = styled.div`\r\n  margin-bottom: 3rem;\r\n  max-width: 54rem;\r\n  box-shadow: ${props => props.shadow};\r\n  padding: 1.4rem 1.6rem;\r\n  background-color: snow;\r\n`;\r\n\r\nconst Label = styled.label`\r\n  font-size: 2rem;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  font-size: 2.2rem;\r\n  width: 100%;\r\n  margin-top: 0.4rem;\r\n  padding: 1.4rem 1.2rem 1.2rem;\r\n  border-radius: 0.6rem;\r\n  background-color: ${props => props.backGroundColor};\r\n\r\n  &:focus {\r\n    border-color: #1d2bcc;\r\n  }\r\n`;\r\n\r\nfunction Filter({ value, onChangeFilter, theme }) {\r\n  return (\r\n    <Container shadow={theme.config.mainShadowBox}>\r\n      <Label>\r\n        Find contacts by name\r\n        <Input\r\n          backGroundColor={theme.config.inputColor}\r\n          type=\"text\"\r\n          value={value}\r\n          onChange={({ target: { value } }) => onChangeFilter(value)}\r\n        />\r\n      </Label>\r\n    </Container>\r\n  );\r\n}\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//   return {\r\n//     onChangeFilter: str => dispatch(filterActions.changeFilter(str)),\r\n//   };\r\n// };\r\n\r\nconst mapDispatchToProps = {\r\n  onChangeFilter: contactsActions.changeFilter,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(withThemeContext(Filter));\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport withThemeContext from './hoc/withTheme';\r\n\r\nconst Background = styled.div`\r\n  padding-top: 3rem;\r\n  width: 100%;\r\n  height: 100vh;\r\n  background-color: ${props => props.color};\r\n`;\r\n\r\nconst Container = styled.div`\r\n  margin: 0 auto;\r\n  max-width: 56rem;\r\n`;\r\n\r\nconst Layout = ({ children, theme }) => (\r\n  <Background color={theme.config.mainBGColor}>\r\n    <Container>{children}</Container>\r\n  </Background>\r\n);\r\n\r\nexport default withThemeContext(Layout);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport slideNoticeTransition from './transitions/slideNotice.module.css';\r\n\r\nconst Container = styled.div`\r\n  background-color: red;\r\n  border-radius: 0.8rem;\r\n  position: fixed;\r\n  top: 5rem;\r\n  right: 0;\r\n`;\r\n\r\nconst Text = styled.p`\r\n  display: inline-block;\r\n  margin: 0 auto;\r\n  color: snow;\r\n  padding: 1.4rem;\r\n  font-size: 3rem;\r\n`;\r\n\r\nfunction Notification({ message, apearNotice }) {\r\n  return (\r\n    <CSSTransition\r\n      timeout={250}\r\n      classNames={slideNoticeTransition}\r\n      in={apearNotice}\r\n      unmountOnExit\r\n    >\r\n      <Container>\r\n        <Text>{message}</Text>\r\n      </Container>\r\n    </CSSTransition>\r\n  );\r\n}\r\n\r\nexport default Notification;\r\n","import React, { Component } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { Formik } from 'formik';\r\nimport withThemeContext from './hoc/withTheme';\r\nimport ContactsOperations from '../redux/contacts/contactsOperations';\r\nimport contactsSelectors from '../redux/contacts/contactsSelectors';\r\nimport Notification from './Notification';\r\n\r\nconst Form = styled.form`\r\n  margin-bottom: 3.4rem;\r\n  max-width: 54rem;\r\n  box-shadow: ${props => props.shadow};\r\n  padding: 1.4rem 1.6rem;\r\n  display: flex;\r\n  flex-flow: column wrap;\r\n  justify-content: center;\r\n  background-color: snow;\r\n`;\r\n\r\nconst Label = styled.label`\r\n  font-size: 2.4rem;\r\n  cursor: pointer;\r\n  ${props =>\r\n    props.error &&\r\n    css`\r\n      color: red;\r\n    `}\r\n`;\r\n\r\nconst Input = styled.input`\r\n  font-size: 2.2rem;\r\n  width: 100%;\r\n  margin-bottom: 2rem;\r\n  padding: 1.4rem 1.2rem 1.2rem;\r\n  border-radius: 0.6rem;\r\n  background-color: ${props => props.backGroundColor};\r\n\r\n  &:focus {\r\n    border-color: #1d2bcc;\r\n  }\r\n\r\n  ${props =>\r\n    props.isValid &&\r\n    css`\r\n      border: 0.3rem solid lightgreen;\r\n    `}\r\n  ${props =>\r\n    props.error &&\r\n    css`\r\n      border: 0.3rem solid red;\r\n    `}\r\n`;\r\n\r\nconst Button = styled.button`\r\n  display: block;\r\n  font-size: 2rem;\r\n  margin: 0 auto;\r\n  width: 100%;\r\n  padding: 1.8rem;\r\n  border-radius: 1rem;\r\n  background-color: #1d2bcc;\r\n  cursor: pointer;\r\n  color: snow;\r\n\r\n  &:hover,\r\n  &:focus {\r\n    background-color: #404fff;\r\n    color: snow;\r\n    border-color: #333333;\r\n    box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.75);\r\n    outline: none;\r\n  }\r\n\r\n  &:active {\r\n    background-color: #7883ff;\r\n  }\r\n`;\r\n\r\nconst ErrorText = styled.div`\r\n  color: red;\r\n  font-size: 2rem;\r\n  margin-top: -2rem;\r\n  margin-bottom: 2rem;\r\n`;\r\n\r\nclass ContactForm extends Component {\r\n  static propTypes = {\r\n    onAddContact: PropTypes.func,\r\n  };\r\n\r\n  state = {\r\n    apearNotice: false,\r\n    notice: null,\r\n  };\r\n\r\n  addContact = (name, number) => {\r\n    const { contacts, onAddContact } = this.props;\r\n    const checkedForName = contacts.find(contact => name === contact.name);\r\n    if (checkedForName) {\r\n      this.setState({\r\n        notice: `${name} is already in contacts`,\r\n        apearNotice: true,\r\n      });\r\n\r\n      return setTimeout(\r\n        () =>\r\n          this.setState({\r\n            apearNotice: false,\r\n          }),\r\n        2400,\r\n      );\r\n    }\r\n    const numberCheck = /^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s./0-9]*$/g;\r\n    const checkedNumber = numberCheck.test(number);\r\n    if (!checkedNumber) {\r\n      this.setState({\r\n        notice: 'Hey! This is not a real number :)',\r\n        apearNotice: true,\r\n      });\r\n      return setTimeout(\r\n        () =>\r\n          this.setState({\r\n            apearNotice: false,\r\n          }),\r\n        2400,\r\n      );\r\n    }\r\n    const newContact = {\r\n      name,\r\n      number,\r\n    };\r\n    onAddContact(newContact);\r\n  };\r\n\r\n  render() {\r\n    const { notice, apearNotice, hasError } = this.state;\r\n    const { theme } = this.props;\r\n\r\n    return (\r\n      <>\r\n        <Notification message={notice} apearNotice={apearNotice} />\r\n        {hasError && (\r\n          <Notification message={hasError.message} apearNotice={true} />\r\n        )}\r\n        <Formik\r\n          initialValues={{ name: '', number: '' }}\r\n          validate={values => {\r\n            const errors = {};\r\n            if (!values.name) {\r\n              errors.name = <ErrorText>Name is Required</ErrorText>;\r\n            }\r\n            return errors;\r\n          }}\r\n          onSubmit={(values, { setSubmitting, resetForm }) => {\r\n            this.addContact(values.name, values.number);\r\n            setSubmitting(false);\r\n            resetForm();\r\n          }}\r\n        >\r\n          {({\r\n            values,\r\n            errors,\r\n            touched,\r\n            handleChange,\r\n            handleBlur,\r\n            handleSubmit,\r\n            isSubmitting,\r\n          }) => (\r\n            <Form onSubmit={handleSubmit} shadow={theme.config.mainShadowBox}>\r\n              {errors.name ? (\r\n                <Label error>\r\n                  Name\r\n                  <Input\r\n                    error\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    backGroundColor={theme.config.inputColor}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.name}\r\n                  />\r\n                  {errors.name && touched.name && errors.name}\r\n                </Label>\r\n              ) : (\r\n                <Label>\r\n                  Name\r\n                  {touched.name ? (\r\n                    <Input\r\n                      isValid\r\n                      type=\"text\"\r\n                      name=\"name\"\r\n                      backGroundColor={theme.config.inputColor}\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      value={values.name}\r\n                    />\r\n                  ) : (\r\n                    <Input\r\n                      type=\"text\"\r\n                      name=\"name\"\r\n                      backGroundColor={theme.config.inputColor}\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      value={values.name}\r\n                    />\r\n                  )}\r\n                  {errors.name && touched.name && errors.name}\r\n                </Label>\r\n              )}\r\n\r\n              <Label>\r\n                Number\r\n                <Input\r\n                  type=\"tel\"\r\n                  name=\"number\"\r\n                  backGroundColor={theme.config.inputColor}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  value={values.number}\r\n                />\r\n                {errors.number && touched.number && errors.number}\r\n              </Label>\r\n              <Button type=\"submit\" disabled={isSubmitting}>\r\n                Add contact\r\n              </Button>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    contacts: contactsSelectors.getContacts(state),\r\n    hasError: contactsSelectors.getError(state),\r\n  };\r\n};\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//   return {\r\n//     onAddContact: obj => dispatch(ContactsActions.addContact(obj)),\r\n//   };\r\n// };\r\n\r\nconst mapDispatchToProps = {\r\n  onAddContact: ContactsOperations.addContact,\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(withThemeContext(ContactForm));\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport withThemeContext from './hoc/withTheme';\r\n\r\nconst Text = styled.p`\r\n  font-size: 3rem;\r\n  color: ${props => props.color};\r\n`;\r\n\r\nconst TextNotification = ({ message, theme }) => {\r\n  return <Text color={theme.config.messageColor}>{message}</Text>;\r\n};\r\n\r\nexport default withThemeContext(TextNotification);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { connect } from 'react-redux';\r\nimport withThemeContext from '../hoc/withTheme';\r\nimport contactsOperations from '../../redux/contacts/contactsOperations';\r\nimport contactsSelectors from '../../redux/contacts/contactsSelectors';\r\n\r\nconst Item = styled.li`\r\n  max-width: 54rem;\r\n  box-shadow: ${props => props.shadow};\r\n  padding: 1.8rem;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n  background-color: snow;\r\n  margin-bottom: 0.6rem;\r\n\r\n  &:last-of-type {\r\n    margin-bottom: none;\r\n  }\r\n`;\r\n\r\nconst Name = styled.p`\r\n  font-size: 2rem;\r\n  flex-basis: 52%;\r\n`;\r\n\r\nconst Number = styled.p`\r\n  font-size: 2rem;\r\n  flex-basis: 36%;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  display: inline-block;\r\n  border: none;\r\n  font-size: 3rem;\r\n  flex-basis: 8%;\r\n  height: 3.8rem;\r\n  border-radius: 0.4rem;\r\n  background-color: #e82a2a;\r\n  cursor: pointer;\r\n  color: snow;\r\n\r\n  &:hover,\r\n  &:focus {\r\n    background-color: #b80000;\r\n    outline: none;\r\n  }\r\n\r\n  &:active {\r\n    background-color: #ff8080;\r\n  }\r\n`;\r\n\r\nfunction ListItem({ name, number, onRemoveContact, theme }) {\r\n  return (\r\n    <Item shadow={theme.config.mainShadowBox}>\r\n      <Name>{name}</Name> <Number>{number}</Number>\r\n      <Button type=\"button\" onClick={onRemoveContact}>\r\n        ×\r\n      </Button>\r\n    </Item>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n  ...contactsSelectors.getTaskById(state, ownProps.id),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    onRemoveContact: () =>\r\n      dispatch(contactsOperations.removeContact(ownProps.id)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(withThemeContext(ListItem));\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\nimport contactsSelectors from '../../redux/contacts/contactsSelectors';\r\nimport TextNotification from '../TextNotification';\r\nimport ListItem from './ListItem';\r\nimport slideItemTransition from '../transitions/slideItem.module.css';\r\n\r\nconst List = styled.ul`\r\n  margin-bottom: 3rem;\r\n`;\r\n\r\nfunction ContactList({ contacts, visibleContacts }) {\r\n  return (\r\n    <>\r\n      <TransitionGroup component={List}>\r\n        {visibleContacts.map(({ id }) => (\r\n          <CSSTransition\r\n            key={id}\r\n            timeout={250}\r\n            classNames={slideItemTransition}\r\n          >\r\n            <ListItem id={id} />\r\n          </CSSTransition>\r\n        ))}\r\n      </TransitionGroup>\r\n      {contacts.length === 0 && (\r\n        <TextNotification message={'You have no contacts. Add some :)'} />\r\n      )}\r\n      {contacts.length > 1 && visibleContacts.length === 0 && (\r\n        <TextNotification message={'No contacts found :('} />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.oneOfType([\r\n    PropTypes.arrayOf(\r\n      PropTypes.exact({\r\n        id: PropTypes.string.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        number: PropTypes.string.isRequired,\r\n      }),\r\n    ),\r\n    PropTypes.array,\r\n  ]),\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    contacts: contactsSelectors.getContacts(state),\r\n    visibleContacts: contactsSelectors.getVisibleContacts(state),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ContactList);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport slideTitleTransition from './transitions/slideTitle.module.css';\r\nimport withThemeContext from './hoc/withTheme';\r\n\r\nconst HeaderContenet = styled.header`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  font-size: 4rem;\r\n  margin-bottom: 2rem;\r\n  color: ${props => props.color};\r\n`;\r\n\r\nconst LabelOfSwitch = styled.span`\r\n  top: -10px;\r\n  position: relative;\r\n  padding: 0px 10px;\r\n  font-size: 2.2rem;\r\n  font-weight: 500;\r\n  color: ${props => props.color};\r\n`;\r\n\r\nconst Label = styled.label`\r\n  position: relative;\r\n  display: inline-block;\r\n  width: 60px;\r\n  height: 34px;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  display: none;\r\n`;\r\n\r\nconst Slider = styled.span`\r\n  position: absolute;\r\n  cursor: pointer;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: #ccc;\r\n  -webkit-transition: 0.4s;\r\n  transition: 0.4s;\r\n  border-radius: 34px;\r\n\r\n  &:before {\r\n    position: absolute;\r\n    content: '';\r\n    height: 26px;\r\n    width: 26px;\r\n    left: 4px;\r\n    bottom: 4px;\r\n    background-color: white;\r\n    -webkit-transition: 0.4s;\r\n    transition: 0.4s;\r\n    border-radius: 50%;\r\n  }\r\n\r\n  input:checked + & {\r\n    background-color: #2196f3;\r\n  }\r\n\r\n  input:focus + & {\r\n    box-shadow: 0 0 1px #2196f3;\r\n  }\r\n\r\n  input:checked + &:before {\r\n    transform: translateX(26px);\r\n  }\r\n`;\r\n\r\nfunction Header({ text, theme }) {\r\n  return (\r\n    <HeaderContenet>\r\n      <CSSTransition\r\n        timeout={500}\r\n        classNames={{ ...slideTitleTransition }}\r\n        in={true}\r\n        appear\r\n      >\r\n        <Title color={theme.config.contentColor}>{text}</Title>\r\n      </CSSTransition>\r\n      <div>\r\n        <LabelOfSwitch color={theme.config.contentColor}>\r\n          Theme: {theme.theme === 'light' ? 'Light' : 'Dark'}\r\n        </LabelOfSwitch>\r\n        <Label>\r\n          <Input\r\n            type=\"checkbox\"\r\n            checked={theme.theme === 'light'}\r\n            onChange={theme.toggleTheme}\r\n          />\r\n          <Slider></Slider>\r\n        </Label>\r\n      </div>\r\n    </HeaderContenet>\r\n  );\r\n}\r\n\r\nexport default withThemeContext(Header);\r\n","import React from 'react';\r\nimport Loader from 'react-loader-spinner';\r\nimport styled from 'styled-components';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\n\r\nconst SpinnerContainer = styled.div`\r\n  background-color: rgba(0, 0, 0, 0.7);\r\n  top: 30%;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  position: fixed;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border-radius: 50%;\r\n  z-index: 1100;\r\n  width: 18rem;\r\n  height: 18rem;\r\n  pointer-events: none;\r\n`;\r\n\r\nfunction Spinner() {\r\n  return (\r\n    <SpinnerContainer>\r\n      <Loader type=\"ThreeDots\" color=\"#ff1212\" height={144} width={144} />\r\n    </SpinnerContainer>\r\n  );\r\n}\r\n\r\nexport default Spinner;\r\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ThemeContext from '../contexts/ThemeContext';\nimport contactsOperations from '../redux/contacts/contactsOperations';\nimport contactsSelectors from '../redux/contacts/contactsSelectors';\nimport Filter from './Filter';\nimport Layout from './Layout';\nimport ContactForm from './ContactForm';\nimport ContactList from './ContactList';\nimport Header from './Header';\nimport Spinner from './Spinner';\nimport '../base.css';\n\nclass App extends Component {\n  componentDidMount() {\n    const { onFetchExistContacts } = this.props;\n    return onFetchExistContacts();\n  }\n\n  render() {\n    const { contacts, isLoadingContacts } = this.props;\n\n    return (\n      <ThemeContext>\n        <Layout>\n          {isLoadingContacts && <Spinner />}\n          <Header text={'Phonebook'} />\n          <ContactForm />\n          {contacts.length >= 2 && <Filter />}\n          <ContactList />\n        </Layout>\n      </ThemeContext>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    contacts: contactsSelectors.getContacts(state),\n    isLoadingContacts: contactsSelectors.getLoading(state),\n  };\n};\n\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     addLocalContacts: array =>\n//       dispatch(ContactsActions.addLocalContacts(array)),\n//   };\n// };\n\nconst mapDispatchToProps = {\n  onFetchExistContacts: contactsOperations.fetchExistContacts,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport contactsActions from './contactsActions';\r\n\r\nconst fetchExist = (state, { payload }) => payload;\r\nconst addNewContact = (state, { payload }) => [...state, payload];\r\nconst removeContact = (state, { payload }) =>\r\n  state.filter(({ id }) => id !== payload);\r\n\r\nconst items = createReducer([], {\r\n  [contactsActions.fetchExistContactsSuccess]: fetchExist,\r\n  [contactsActions.addContactSuccess]: addNewContact,\r\n  [contactsActions.removeContactSuccess]: removeContact,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [contactsActions.changeFilter]: (state, { payload }) => payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [contactsActions.fetchExistContactsRequest]: () => true,\r\n  [contactsActions.fetchExistContactsSuccess]: () => false,\r\n  [contactsActions.fetchExistContactsError]: () => false,\r\n  [contactsActions.addContactRequest]: () => true,\r\n  [contactsActions.addContactSuccess]: () => false,\r\n  [contactsActions.addContactError]: () => false,\r\n  [contactsActions.removeContactRequest]: () => true,\r\n  [contactsActions.removeContactSuccess]: () => false,\r\n  [contactsActions.removeContactError]: () => false,\r\n});\r\n\r\nconst error = createReducer(null, {\r\n  [contactsActions.fetchExistContactsError]: (_, { payload }) => payload,\r\n  [contactsActions.addContactError]: (_, { payload }) => payload,\r\n  [contactsActions.removeContactError]: (_, { payload }) => payload,\r\n  [contactsActions.fetchExistContactsRequest]: () => null,\r\n  [contactsActions.addContactRequest]: () => null,\r\n  [contactsActions.removeContactRequest]: () => null,\r\n});\r\n\r\nconst contactsReducer = combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n  error,\r\n});\r\n\r\nexport default contactsReducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport contactsReducer from './contacts/contactsReducer';\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './components/App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector('#root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slideNotice_enter__2sg6c\",\"enterActive\":\"slideNotice_enterActive__CciNB\",\"exit\":\"slideNotice_exit__3arY9\",\"exitActive\":\"slideNotice_exitActive__3ydbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slideItem_enter__2AXv2\",\"enterActive\":\"slideItem_enterActive__cX91w\",\"exit\":\"slideItem_exit__2XS_0\",\"exitActive\":\"slideItem_exitActive__2LYlY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appear\":\"slideTitle_appear__29OAn\",\"appearActive\":\"slideTitle_appearActive__XpJ25\"};"],"sourceRoot":""}