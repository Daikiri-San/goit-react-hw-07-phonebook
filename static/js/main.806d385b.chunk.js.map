{"version":3,"sources":["redux/contacts/contactsActions.js","redux/contacts/contactsOperations.js","redux/contacts/contactsSelectors.js","contexts/ThemeContext.js","components/hoc/withTheme.js","components/Filter.js","components/FilterContainer.js","components/Layout.js","components/Notification.js","components/ContactForm.js","components/ContactFromContainer.js","components/TextNotification.js","components/ContactList/ListItem.js","components/ContactList/ListItemContainer.js","components/ContactList/ContactList.js","components/ContactList/ContactListContainer.js","components/Header.js","components/Spinner.js","components/App.js","components/AppContainer.js","redux/contacts/contactsReducer.js","redux/store.js","index.js","components/transitions/slideNotice.module.css","components/transitions/slideItem.module.css","components/transitions/slideTitle.module.css"],"names":["fetchExistContactsRequest","createAction","fetchExistContactsSuccess","fetchExistContactsError","addContactRequest","addContactSuccess","addContactError","removeContactRequest","removeContactSuccess","removeContactError","changeFilter","axios","defaults","baseURL","addContact","name","number","dispatch","contactsActions","post","then","data","catch","error","fetchExistContacts","get","removeContact","id","delete","messege","getContacts","contacts","items","getFilter","filter","getLoading","loading","getError","getVisibleContacts","createSelector","toLowerCase","includes","getTaskById","state","contactId","find","themeConfig","light","mainBGColor","contentColor","mainShadowBox","inputColor","messageColor","dark","Context","createContext","ThemeContext","toggleTheme","theme","config","setState","children","this","props","Provider","value","Component","Consumer","WithTheme","WrappedComponent","ctx","Container","styled","div","shadow","Label","label","Input","input","backGroundColor","Filter","onChangeFilter","type","onChange","target","mapDispatchToProps","connect","withThemeContext","Background","color","Text","p","Notification","message","apearNotice","CSSTransition","timeout","classNames","slideNoticeTransition","in","unmountOnExit","Form","form","css","isValid","Button","button","ErrorText","ContactForm","notice","hasError","initialValues","validate","values","errors","onSubmit","setSubmitting","resetForm","touched","handleChange","handleBlur","handleSubmit","isSubmitting","onBlur","disabled","ContactFormContainer","onAddContact","contact","setTimeout","test","ContactsOperations","contactsSelectors","Item","li","Name","Number","ListItem","onRemoveContact","onClick","ownProps","contactsOperations","List","ul","ContactList","visibleContacts","TransitionGroup","component","map","key","slideItemTransition","length","HeaderContenet","header","Title","h1","LabelOfSwitch","span","Slider","text","slideTitleTransition","appear","checked","SpinnerContainer","Spinner","height","width","App","isLoadingContacts","AppContainer","onFetchExistContacts","createReducer","payload","_","contactsReducer","combineReducers","store","configureStore","reducer","ReactDOM","render","document","querySelector","module","exports"],"mappings":"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","file":"static/js/main.806d385b.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst fetchExistContactsRequest = createAction('contacts/fetchExistRequest');\r\nconst fetchExistContactsSuccess = createAction('contacts/fetchExistSuccess');\r\nconst fetchExistContactsError = createAction('contacts/fetchExistError');\r\n\r\nconst addContactRequest = createAction('contacts/addRequest');\r\nconst addContactSuccess = createAction('contacts/addSuccess');\r\nconst addContactError = createAction('contacts/addError');\r\n\r\nconst removeContactRequest = createAction('contacts/removeRequest');\r\nconst removeContactSuccess = createAction('contacts/removeSuccess');\r\nconst removeContactError = createAction('contacts/removeError');\r\n\r\nconst changeFilter = createAction('filter/change');\r\n\r\nexport default {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  fetchExistContactsRequest,\r\n  fetchExistContactsSuccess,\r\n  fetchExistContactsError,\r\n  removeContactRequest,\r\n  removeContactSuccess,\r\n  removeContactError,\r\n  changeFilter,\r\n};\r\n","import axios from 'axios';\r\nimport contactsActions from './contactsActions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:2000';\r\n\r\nconst fetchExistContacts = () => dispatch => {\r\n  dispatch(contactsActions.fetchExistContactsRequest());\r\n\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => {\r\n      dispatch(contactsActions.fetchExistContactsSuccess(data));\r\n    })\r\n    .catch(error => dispatch(contactsActions.fetchExistContactsError(error)));\r\n};\r\n\r\nconst addContact = ({ name, number }) => dispatch => {\r\n  dispatch(contactsActions.addContactRequest());\r\n\r\n  axios\r\n    .post('/contacts', { name, number })\r\n    .then(({ data }) => {\r\n      dispatch(contactsActions.addContactSuccess(data));\r\n    })\r\n    .catch(error => dispatch(contactsActions.addContactError(error)));\r\n};\r\n\r\nconst removeContact = id => dispatch => {\r\n  dispatch(contactsActions.removeContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => {\r\n      dispatch(contactsActions.removeContactSuccess(id));\r\n    })\r\n    .catch(error => {\r\n      dispatch(contactsActions.removeContactError(error.messege));\r\n    });\r\n};\r\n\r\nexport default {\r\n  addContact,\r\n  fetchExistContacts,\r\n  removeContact,\r\n};\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getLoading = ({ contacts }) => contacts.loading;\r\nconst getContacts = ({ contacts }) => contacts.items;\r\nconst getFilter = ({ contacts }) => contacts.filter;\r\nconst getError = ({ contacts }) => contacts.error;\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    return contacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n  },\r\n);\r\n\r\nconst getTaskById = createSelector(\r\n  [(state, contactId) => contactId, getContacts],\r\n  (contactId, contacts) => contacts.find(({ id }) => id === contactId),\r\n);\r\n\r\nexport default {\r\n  getLoading,\r\n  getContacts,\r\n  getFilter,\r\n  getError,\r\n  getVisibleContacts,\r\n  getTaskById,\r\n};\r\n","import React, { Component, createContext } from 'react';\r\n\r\nconst themeConfig = {\r\n  light: {\r\n    mainBGColor: 'snow',\r\n    contentColor: '#1d2bcc',\r\n    mainShadowBox: '0px 2px 8px -3px rgba(0, 0, 0, 0.75)',\r\n    inputColor: 'snow',\r\n    messageColor: 'black',\r\n  },\r\n\r\n  dark: {\r\n    mainBGColor: '#333333',\r\n    contentColor: '#ccc',\r\n    mainShadowBox: '0px 0px 8px 1px rgba(255, 255, 255, 0.75)',\r\n    inputColor: '#e0e0e0',\r\n    messageColor: '#ccc',\r\n  },\r\n};\r\n\r\nconst Context = createContext(themeConfig.light);\r\n\r\nclass ThemeContext extends Component {\r\n  static Consumer = Context.Consumer;\r\n\r\n  toggleTheme = () => {\r\n    const { theme, config } = this.state;\r\n    this.setState({\r\n      theme: theme === 'dark' ? 'light' : 'dark',\r\n      config:\r\n        config === themeConfig.light ? themeConfig.dark : themeConfig.light,\r\n    });\r\n  };\r\n\r\n  state = {\r\n    theme: 'light',\r\n    toggleTheme: this.toggleTheme,\r\n    config: themeConfig.light,\r\n  };\r\n\r\n  render() {\r\n    const { children } = this.props;\r\n    return (\r\n      <Context.Provider\r\n        value={{\r\n          ...this.state,\r\n        }}\r\n      >\r\n        {children}\r\n      </Context.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ThemeContext;\r\n","import React from 'react';\r\nimport ThemeContext from '../../contexts/ThemeContext';\r\n\r\nconst WithTheme = WrappedComponent => {\r\n  return function WithThemeContext(props) {\r\n    return (\r\n      <ThemeContext.Consumer>\r\n        {ctx => <WrappedComponent {...props} theme={ctx} />}\r\n      </ThemeContext.Consumer>\r\n    );\r\n  };\r\n};\r\n\r\nexport default WithTheme;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n  margin-bottom: 3rem;\r\n  max-width: 54rem;\r\n  box-shadow: ${props => props.shadow};\r\n  padding: 1.4rem 1.6rem;\r\n  background-color: snow;\r\n`;\r\n\r\nconst Label = styled.label`\r\n  font-size: 2rem;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  font-size: 2.2rem;\r\n  width: 100%;\r\n  margin-top: 0.4rem;\r\n  padding: 1.4rem 1.2rem 1.2rem;\r\n  border-radius: 0.6rem;\r\n  background-color: ${props => props.backGroundColor};\r\n\r\n  &:focus {\r\n    border-color: #1d2bcc;\r\n  }\r\n`;\r\n\r\nfunction Filter({ value, onChangeFilter, theme }) {\r\n  return (\r\n    <Container shadow={theme.config.mainShadowBox}>\r\n      <Label>\r\n        Find contacts by name\r\n        <Input\r\n          backGroundColor={theme.config.inputColor}\r\n          type=\"text\"\r\n          value={value}\r\n          onChange={({ target: { value } }) => onChangeFilter(value)}\r\n        />\r\n      </Label>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Filter;\r\n","import { connect } from 'react-redux';\r\nimport contactsActions from '../redux/contacts/contactsActions';\r\nimport withThemeContext from './hoc/withTheme';\r\nimport Filter from './Filter';\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//   return {\r\n//     onChangeFilter: str => dispatch(filterActions.changeFilter(str)),\r\n//   };\r\n// };\r\n\r\nconst mapDispatchToProps = {\r\n  onChangeFilter: contactsActions.changeFilter,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(withThemeContext(Filter));\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport withThemeContext from './hoc/withTheme';\r\n\r\nconst Background = styled.div`\r\n  padding-top: 3rem;\r\n  width: 100%;\r\n  height: 100vh;\r\n  background-color: ${props => props.color};\r\n`;\r\n\r\nconst Container = styled.div`\r\n  margin: 0 auto;\r\n  max-width: 56rem;\r\n`;\r\n\r\nconst Layout = ({ children, theme }) => (\r\n  <Background color={theme.config.mainBGColor}>\r\n    <Container>{children}</Container>\r\n  </Background>\r\n);\r\n\r\nexport default withThemeContext(Layout);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport slideNoticeTransition from './transitions/slideNotice.module.css';\r\n\r\nconst Container = styled.div`\r\n  background-color: red;\r\n  border-radius: 0.8rem;\r\n  position: fixed;\r\n  top: 5rem;\r\n  right: 0;\r\n`;\r\n\r\nconst Text = styled.p`\r\n  display: inline-block;\r\n  margin: 0 auto;\r\n  color: snow;\r\n  padding: 1.4rem;\r\n  font-size: 3rem;\r\n`;\r\n\r\nfunction Notification({ message, apearNotice }) {\r\n  return (\r\n    <CSSTransition\r\n      timeout={250}\r\n      classNames={slideNoticeTransition}\r\n      in={apearNotice}\r\n      unmountOnExit\r\n    >\r\n      <Container>\r\n        <Text>{message}</Text>\r\n      </Container>\r\n    </CSSTransition>\r\n  );\r\n}\r\n\r\nexport default Notification;\r\n","import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { Formik } from 'formik';\r\nimport Notification from './Notification';\r\n\r\nconst Form = styled.form`\r\n  margin-bottom: 3.4rem;\r\n  max-width: 54rem;\r\n  box-shadow: ${props => props.shadow};\r\n  padding: 1.4rem 1.6rem;\r\n  display: flex;\r\n  flex-flow: column wrap;\r\n  justify-content: center;\r\n  background-color: snow;\r\n`;\r\n\r\nconst Label = styled.label`\r\n  font-size: 2.4rem;\r\n  cursor: pointer;\r\n  ${props =>\r\n    props.error &&\r\n    css`\r\n      color: red;\r\n    `}\r\n`;\r\n\r\nconst Input = styled.input`\r\n  font-size: 2.2rem;\r\n  width: 100%;\r\n  margin-bottom: 2rem;\r\n  padding: 1.4rem 1.2rem 1.2rem;\r\n  border-radius: 0.6rem;\r\n  background-color: ${props => props.backGroundColor};\r\n\r\n  &:focus {\r\n    border-color: #1d2bcc;\r\n  }\r\n\r\n  ${props =>\r\n    props.isValid &&\r\n    css`\r\n      border: 0.3rem solid lightgreen;\r\n    `}\r\n  ${props =>\r\n    props.error &&\r\n    css`\r\n      border: 0.3rem solid red;\r\n    `}\r\n`;\r\n\r\nconst Button = styled.button`\r\n  display: block;\r\n  font-size: 2rem;\r\n  margin: 0 auto;\r\n  width: 100%;\r\n  padding: 1.8rem;\r\n  border-radius: 1rem;\r\n  background-color: #1d2bcc;\r\n  cursor: pointer;\r\n  color: snow;\r\n\r\n  &:hover,\r\n  &:focus {\r\n    background-color: #404fff;\r\n    color: snow;\r\n    border-color: #333333;\r\n    box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.75);\r\n    outline: none;\r\n  }\r\n\r\n  &:active {\r\n    background-color: #7883ff;\r\n  }\r\n`;\r\n\r\nconst ErrorText = styled.div`\r\n  color: red;\r\n  font-size: 2rem;\r\n  margin-top: -2rem;\r\n  margin-bottom: 2rem;\r\n`;\r\n\r\nfunction ContactForm({ notice, apearNotice, hasError, theme, addContact }) {\r\n  return (\r\n    <>\r\n      <Notification message={notice} apearNotice={apearNotice} />\r\n      {hasError && <Notification message={hasError} apearNotice={true} />}\r\n      <Formik\r\n        initialValues={{ name: '', number: '' }}\r\n        validate={values => {\r\n          const errors = {};\r\n          if (!values.name) {\r\n            errors.name = <ErrorText>Name is Required</ErrorText>;\r\n          }\r\n          return errors;\r\n        }}\r\n        onSubmit={(values, { setSubmitting, resetForm }) => {\r\n          addContact(values.name, values.number);\r\n          setSubmitting(false);\r\n          resetForm();\r\n        }}\r\n      >\r\n        {({\r\n          values,\r\n          errors,\r\n          touched,\r\n          handleChange,\r\n          handleBlur,\r\n          handleSubmit,\r\n          isSubmitting,\r\n        }) => (\r\n          <Form onSubmit={handleSubmit} shadow={theme.config.mainShadowBox}>\r\n            {errors.name ? (\r\n              <Label error>\r\n                Name\r\n                <Input\r\n                  error\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  backGroundColor={theme.config.inputColor}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  value={values.name}\r\n                />\r\n                {errors.name && touched.name && errors.name}\r\n              </Label>\r\n            ) : (\r\n              <Label>\r\n                Name\r\n                {touched.name ? (\r\n                  <Input\r\n                    isValid\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    backGroundColor={theme.config.inputColor}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.name}\r\n                  />\r\n                ) : (\r\n                  <Input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    backGroundColor={theme.config.inputColor}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.name}\r\n                  />\r\n                )}\r\n                {errors.name && touched.name && errors.name}\r\n              </Label>\r\n            )}\r\n\r\n            <Label>\r\n              Number\r\n              <Input\r\n                type=\"tel\"\r\n                name=\"number\"\r\n                backGroundColor={theme.config.inputColor}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.number}\r\n              />\r\n              {errors.number && touched.number && errors.number}\r\n            </Label>\r\n            <Button type=\"submit\" disabled={isSubmitting}>\r\n              Add contact\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ContactForm;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport withThemeContext from './hoc/withTheme';\r\nimport ContactsOperations from '../redux/contacts/contactsOperations';\r\nimport contactsSelectors from '../redux/contacts/contactsSelectors';\r\nimport ContactForm from './ContactForm';\r\n\r\nclass ContactFormContainer extends Component {\r\n  state = {\r\n    apearNotice: false,\r\n    notice: null,\r\n  };\r\n\r\n  addContact = (name, number) => {\r\n    const { contacts, onAddContact } = this.props;\r\n    const checkedForName = contacts.find(contact => name === contact.name);\r\n    if (checkedForName) {\r\n      this.setState({\r\n        notice: `${name} is already in contacts`,\r\n        apearNotice: true,\r\n      });\r\n\r\n      return setTimeout(\r\n        () =>\r\n          this.setState({\r\n            apearNotice: false,\r\n          }),\r\n        2400,\r\n      );\r\n    }\r\n    const numberCheck = /^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s./0-9]*$/g;\r\n    const checkedNumber = numberCheck.test(number);\r\n    if (!checkedNumber) {\r\n      this.setState({\r\n        notice: 'Hey! This is not a real number :)',\r\n        apearNotice: true,\r\n      });\r\n      return setTimeout(\r\n        () =>\r\n          this.setState({\r\n            apearNotice: false,\r\n          }),\r\n        2400,\r\n      );\r\n    }\r\n    const newContact = {\r\n      name,\r\n      number,\r\n    };\r\n    onAddContact(newContact);\r\n  };\r\n  render() {\r\n    return (\r\n      <ContactForm\r\n        {...this.props}\r\n        addContact={this.addContact}\r\n        apearNotice={this.state.apearNotice}\r\n        notice={this.state.notice}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    contacts: contactsSelectors.getContacts(state),\r\n    hasError: contactsSelectors.getError(state),\r\n  };\r\n};\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//   return {\r\n//     onAddContact: obj => dispatch(ContactsActions.addContact(obj)),\r\n//   };\r\n// };\r\n\r\nconst mapDispatchToProps = {\r\n  onAddContact: ContactsOperations.addContact,\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(withThemeContext(ContactFormContainer));\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport withThemeContext from './hoc/withTheme';\r\n\r\nconst Text = styled.p`\r\n  font-size: 3rem;\r\n  color: ${props => props.color};\r\n`;\r\n\r\nconst TextNotification = ({ message, theme }) => {\r\n  return <Text color={theme.config.messageColor}>{message}</Text>;\r\n};\r\n\r\nexport default withThemeContext(TextNotification);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Item = styled.li`\r\n  max-width: 54rem;\r\n  box-shadow: ${props => props.shadow};\r\n  padding: 1.8rem;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n  background-color: snow;\r\n  margin-bottom: 0.6rem;\r\n\r\n  &:last-of-type {\r\n    margin-bottom: none;\r\n  }\r\n`;\r\n\r\nconst Name = styled.p`\r\n  font-size: 2rem;\r\n  flex-basis: 52%;\r\n`;\r\n\r\nconst Number = styled.p`\r\n  font-size: 2rem;\r\n  flex-basis: 36%;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  display: inline-block;\r\n  border: none;\r\n  font-size: 3rem;\r\n  flex-basis: 8%;\r\n  height: 3.8rem;\r\n  border-radius: 0.4rem;\r\n  background-color: #e82a2a;\r\n  cursor: pointer;\r\n  color: snow;\r\n\r\n  &:hover,\r\n  &:focus {\r\n    background-color: #b80000;\r\n    outline: none;\r\n  }\r\n\r\n  &:active {\r\n    background-color: #ff8080;\r\n  }\r\n`;\r\n\r\nfunction ListItem({ name, number, onRemoveContact, theme }) {\r\n  return (\r\n    <Item shadow={theme.config.mainShadowBox}>\r\n      <Name>{name}</Name> <Number>{number}</Number>\r\n      <Button type=\"button\" onClick={onRemoveContact}>\r\n        ×\r\n      </Button>\r\n    </Item>\r\n  );\r\n}\r\n\r\nexport default ListItem;\r\n","import { connect } from 'react-redux';\r\nimport withThemeContext from '../hoc/withTheme';\r\nimport contactsOperations from '../../redux/contacts/contactsOperations';\r\nimport contactsSelectors from '../../redux/contacts/contactsSelectors';\r\nimport ListItem from './ListItem';\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n  ...contactsSelectors.getTaskById(state, ownProps.id),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    onRemoveContact: () =>\r\n      dispatch(contactsOperations.removeContact(ownProps.id)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(withThemeContext(ListItem));\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\nimport TextNotification from '../TextNotification';\r\nimport ListItem from './ListItemContainer';\r\nimport slideItemTransition from '../transitions/slideItem.module.css';\r\n\r\nconst List = styled.ul`\r\n  margin-bottom: 3rem;\r\n`;\r\n\r\nfunction ContactList({ contacts, visibleContacts }) {\r\n  return (\r\n    <>\r\n      <TransitionGroup component={List}>\r\n        {visibleContacts.map(({ id }) => (\r\n          <CSSTransition\r\n            key={id}\r\n            timeout={250}\r\n            classNames={slideItemTransition}\r\n          >\r\n            <ListItem id={id} />\r\n          </CSSTransition>\r\n        ))}\r\n      </TransitionGroup>\r\n      {contacts.length === 0 && (\r\n        <TextNotification message={'You have no contacts. Add some :)'} />\r\n      )}\r\n      {contacts.length > 1 && visibleContacts.length === 0 && (\r\n        <TextNotification message={'No contacts found :('} />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.oneOfType([\r\n    PropTypes.arrayOf(\r\n      PropTypes.exact({\r\n        id: PropTypes.string.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        number: PropTypes.string.isRequired,\r\n      }),\r\n    ),\r\n    PropTypes.array,\r\n  ]),\r\n};\r\n\r\nexport default ContactList;\r\n","import { connect } from 'react-redux';\r\nimport contactsSelectors from '../../redux/contacts/contactsSelectors';\r\nimport ContactList from './ContactList';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    contacts: contactsSelectors.getContacts(state),\r\n    visibleContacts: contactsSelectors.getVisibleContacts(state),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ContactList);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport slideTitleTransition from './transitions/slideTitle.module.css';\r\nimport withThemeContext from './hoc/withTheme';\r\n\r\nconst HeaderContenet = styled.header`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  font-size: 4rem;\r\n  margin-bottom: 2rem;\r\n  color: ${props => props.color};\r\n`;\r\n\r\nconst LabelOfSwitch = styled.span`\r\n  top: -10px;\r\n  position: relative;\r\n  padding: 0px 10px;\r\n  font-size: 2.2rem;\r\n  font-weight: 500;\r\n  color: ${props => props.color};\r\n`;\r\n\r\nconst Label = styled.label`\r\n  position: relative;\r\n  display: inline-block;\r\n  width: 60px;\r\n  height: 34px;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  display: none;\r\n`;\r\n\r\nconst Slider = styled.span`\r\n  position: absolute;\r\n  cursor: pointer;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: #ccc;\r\n  -webkit-transition: 0.4s;\r\n  transition: 0.4s;\r\n  border-radius: 34px;\r\n\r\n  &:before {\r\n    position: absolute;\r\n    content: '';\r\n    height: 26px;\r\n    width: 26px;\r\n    left: 4px;\r\n    bottom: 4px;\r\n    background-color: white;\r\n    -webkit-transition: 0.4s;\r\n    transition: 0.4s;\r\n    border-radius: 50%;\r\n  }\r\n\r\n  input:checked + & {\r\n    background-color: #2196f3;\r\n  }\r\n\r\n  input:focus + & {\r\n    box-shadow: 0 0 1px #2196f3;\r\n  }\r\n\r\n  input:checked + &:before {\r\n    transform: translateX(26px);\r\n  }\r\n`;\r\n\r\nfunction Header({ text, theme }) {\r\n  return (\r\n    <HeaderContenet>\r\n      <CSSTransition\r\n        timeout={500}\r\n        classNames={{ ...slideTitleTransition }}\r\n        in={true}\r\n        appear\r\n      >\r\n        <Title color={theme.config.contentColor}>{text}</Title>\r\n      </CSSTransition>\r\n      <div>\r\n        <LabelOfSwitch color={theme.config.contentColor}>\r\n          Theme: {theme.theme === 'light' ? 'Light' : 'Dark'}\r\n        </LabelOfSwitch>\r\n        <Label>\r\n          <Input\r\n            type=\"checkbox\"\r\n            checked={theme.theme === 'light'}\r\n            onChange={theme.toggleTheme}\r\n          />\r\n          <Slider></Slider>\r\n        </Label>\r\n      </div>\r\n    </HeaderContenet>\r\n  );\r\n}\r\n\r\nexport default withThemeContext(Header);\r\n","import React from 'react';\r\nimport Loader from 'react-loader-spinner';\r\nimport styled from 'styled-components';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\n\r\nconst SpinnerContainer = styled.div`\r\n  background-color: rgba(0, 0, 0, 0.7);\r\n  top: 30%;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  position: fixed;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border-radius: 50%;\r\n  z-index: 1100;\r\n  width: 18rem;\r\n  height: 18rem;\r\n  pointer-events: none;\r\n`;\r\n\r\nfunction Spinner() {\r\n  return (\r\n    <SpinnerContainer>\r\n      <Loader type=\"ThreeDots\" color=\"#ff1212\" height={144} width={144} />\r\n    </SpinnerContainer>\r\n  );\r\n}\r\n\r\nexport default Spinner;\r\n","import React from 'react';\nimport ThemeContext from '../contexts/ThemeContext';\nimport Filter from './FilterContainer';\nimport Layout from './Layout';\nimport ContactForm from './ContactFromContainer';\nimport ContactList from './ContactList/ContactListContainer';\nimport Header from './Header';\nimport Spinner from './Spinner';\nimport '../base.css';\n\nfunction App({ contacts, isLoadingContacts }) {\n  return (\n    <ThemeContext>\n      <Layout>\n        {isLoadingContacts && <Spinner />}\n        <Header text={'Phonebook'} />\n        <ContactForm />\n        {contacts.length >= 2 && <Filter />}\n        <ContactList />\n      </Layout>\n    </ThemeContext>\n  );\n}\n\nexport default App;\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactsOperations from '../redux/contacts/contactsOperations';\r\nimport contactsSelectors from '../redux/contacts/contactsSelectors';\r\nimport App from './App';\r\n\r\nclass AppContainer extends Component {\r\n  componentDidMount() {\r\n    const { onFetchExistContacts } = this.props;\r\n    return onFetchExistContacts();\r\n  }\r\n\r\n  render() {\r\n    return <App {...this.props} />;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    contacts: contactsSelectors.getContacts(state),\r\n    isLoadingContacts: contactsSelectors.getLoading(state),\r\n  };\r\n};\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//   return {\r\n//     addLocalContacts: array =>\r\n//       dispatch(ContactsActions.addLocalContacts(array)),\r\n//   };\r\n// };\r\n\r\nconst mapDispatchToProps = {\r\n  onFetchExistContacts: contactsOperations.fetchExistContacts,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AppContainer);\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport contactsActions from './contactsActions';\r\n\r\nconst fetchExist = (state, { payload }) => payload;\r\nconst addNewContact = (state, { payload }) => [...state, payload];\r\nconst removeContact = (state, { payload }) =>\r\n  state.filter(({ id }) => id !== payload);\r\n\r\nconst items = createReducer([], {\r\n  [contactsActions.fetchExistContactsSuccess]: fetchExist,\r\n  [contactsActions.addContactSuccess]: addNewContact,\r\n  [contactsActions.removeContactSuccess]: removeContact,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [contactsActions.changeFilter]: (state, { payload }) => payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [contactsActions.fetchExistContactsRequest]: () => true,\r\n  [contactsActions.fetchExistContactsSuccess]: () => false,\r\n  [contactsActions.fetchExistContactsError]: () => false,\r\n  [contactsActions.addContactRequest]: () => true,\r\n  [contactsActions.addContactSuccess]: () => false,\r\n  [contactsActions.addContactError]: () => false,\r\n  [contactsActions.removeContactRequest]: () => true,\r\n  [contactsActions.removeContactSuccess]: () => false,\r\n  [contactsActions.removeContactError]: () => false,\r\n});\r\n\r\nconst error = createReducer(null, {\r\n  [contactsActions.fetchExistContactsError]: (_, { payload }) => payload,\r\n  [contactsActions.addContactError]: (_, { payload }) => payload,\r\n  [contactsActions.removeContactError]: (_, { payload }) => payload,\r\n  [contactsActions.fetchExistContactsRequest]: () => null,\r\n  [contactsActions.addContactRequest]: () => null,\r\n  [contactsActions.removeContactRequest]: () => null,\r\n});\r\n\r\nconst contactsReducer = combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n  error,\r\n});\r\n\r\nexport default contactsReducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport contactsReducer from './contacts/contactsReducer';\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './components/AppContainer';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector('#root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slideNotice_enter__2sg6c\",\"enterActive\":\"slideNotice_enterActive__CciNB\",\"exit\":\"slideNotice_exit__3arY9\",\"exitActive\":\"slideNotice_exitActive__3ydbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slideItem_enter__2AXv2\",\"enterActive\":\"slideItem_enterActive__cX91w\",\"exit\":\"slideItem_exit__2XS_0\",\"exitActive\":\"slideItem_exitActive__2LYlY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appear\":\"slideTitle_appear__29OAn\",\"appearActive\":\"slideTitle_appearActive__XpJ25\"};"],"sourceRoot":""}